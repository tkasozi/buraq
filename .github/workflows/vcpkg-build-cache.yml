name: Matrix Build and Deploy

on: [ push, pull_request ]

jobs:
  init:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: true
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        experimental: [ false ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows # <--- CHANGED FROM x64-mingw-dynamic
            cmake_shell: pwsh
            cmake_line_continuation: '`'
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux
            cmake_shell: bash
            cmake_line_continuation: '\'
          - os: macos-latest
            vcpkg_triplet: x64-osx
            cmake_shell: bash
            cmake_line_continuation: '\'
    outputs:
      matrix: ${{ toJSON(strategy.matrix) }}
    steps:
      - run: |
          echo "Outputting matrix: ${{ toJSON(strategy.matrix) }}"

  config:
    needs: init
    runs-on: ${{ fromJSON(needs.init.matrix.os) }}
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Test
        run: |
          echo "Testing for ${{ matrix.os }} / Node ${{ matrix.node }}"
#jobs:
#  build:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ windows-latest, ubuntu-latest, macos-latest ]
#        build_type: [ Debug, Release ]
#        include:
#          - os: windows-latest
#            vcpkg_triplet: x64-windows # <--- CHANGED FROM x64-mingw-dynamic
#            cmake_shell: pwsh
#            cmake_line_continuation: '`'
#          - os: ubuntu-latest
#            vcpkg_triplet: x64-linux
#            cmake_shell: bash
#            cmake_line_continuation: '\'
#          - os: macos-latest
#            vcpkg_triplet: x64-osx
#            cmake_shell: bash
#            cmake_line_continuation: '\'
#    runs-on: ${{ matrix.os }}
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          submodules: true
#          path: it-tools-editor
#          fetch-depth: 0
#
#      # MODIFIED/CONDITIONAL STEP: Set up MSYS2 with Build Tools (Windows Only)
#      # This step is now only conditionally needed if your *other* project dependencies
#      # (outside of vcpkg for Qt) still strictly require MSYS2/MinGW tools.
#      # If your project only needs CMake, Ninja, and Visual Studio for Windows, you can REMOVE THIS STEP ENTIRELY.
#      - name: Set up MSYS2 with Build Tools (Windows Only, if needed)
#        if: runner.os == 'Windows' && matrix.vcpkg_triplet == 'x64-mingw-dynamic' # Only run if MinGW is used
#        uses: msys2/setup-msys2@v2
#        with:
#          msys2-architecture: x86_64
#          update: true
#          install: >
#            mingw-w64-x86_64-toolchain
#            git
#            ninja
#          path-type: minimal
#          msystem: MINGW64
#      # IMPORTANT: If you switch to x64-windows triplet for Windows,
#      # you will NOT need the MSYS2 setup step unless your *application*
#      # (not its vcpkg dependencies) relies on specific MSYS2 tools.
#      # The 'windows-latest' runner comes with Visual Studio and basic Git/CMake pre-installed.
#      - name: Clone Vcpkg Repository
#        if: ${{ github.workspace }}/it-tools-editor/vcpkg == '' || !contains(github.workspace, 'it-tools-editor/vcpkg')
#        uses: actions/checkout@v4
#        with:
#          repository: microsoft/vcpkg
#          ref: master
#          path: vcpkg
#          fetch-depth: 0
#      - name: Bootstrap Vcpkg
#        shell: ${{ matrix.cmake_shell }}
#        run: |
#          if ("${{ runner.os }}" -eq "Windows") {
#            ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
#          } else {
#            ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh
#          }
#
#      - name: Cache Vcpkg Asset Downloads
#        uses: actions/cache@v4
#        with:
#          path: |
#            ${{ github.workspace }}/vcpkg/downloads
#            ${{ github.workspace }}/vcpkg/toolsrc
#          key: ${{ runner.os }}-${{ matrix.build_type }}-vcpkg-assets-${{ hashFiles('it-tools-editor/vcpkg.json') }}
#          restore-keys: |
#            ${{ runner.os }}-vcpkg-assets-
#
#      - name: Configure NuGet for GitHub Packages
#        env:
#          USERNAME: ${{ github.repository_owner }}
#          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
#        shell: ${{ matrix.cmake_shell }}
#        run: |
#          if ("${{ runner.os }}" -eq "Windows") {
#            $nugetConfigPath = Join-Path $env:APPDATA "NuGet\NuGet.Config"
#            $nugetConfigContent = @"
#            <?xml version="1.0" encoding="utf-8"?>
#            <configuration>
#              <packageSources>
#                <clear />
#                <add key="GitHubPackages" value="https://nuget.pkg.github.com/$env:USERNAME/index.json" />
#              </packageSources>
#              <packageSourceCredentials>
#                <GitHubPackages>
#                  <add key="Username" value="$env:USERNAME" />
#                  <add key="ClearTextPassword" value="$env:GH_PACKAGES_TOKEN" />
#                </GitHubPackages>
#              </packageSourceCredentials>
#            </configuration>
#            "@
#            New-Item -ItemType Directory -Force -Path (Split-Path $nugetConfigPath)
#            $nugetConfigContent | Out-File $nugetConfigPath
#            Write-Host "Created NuGet.Config at $nugetConfigPath"
#          } else {
#            mkdir -p ~/.nuget/NuGet
#            echo '<?xml version="1.0" encoding="utf-8"?>' > ~/.nuget/NuGet/NuGet.Config
#            echo '<configuration>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '  <packageSources>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '    <clear />' >> ~/.nuget/NuGet/NuGet.Config
#            echo '    <add key="GitHubPackages" value="https://nuget.pkg.github.com/'"${{ env.USERNAME }}"'/index.json" />' >> ~/.nuget/NuGet/NuGet.Config
#            echo '  </packageSources>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '  <packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '    <GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '      <add key="Username" value="'"${{ env.USERNAME }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
#            echo '      <add key="ClearTextPassword" value="'"${{ env.GH_PACKAGES_TOKEN }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
#            echo '    </GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '  </packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
#            echo '</configuration>' >> ~/.nuget/NuGet/NuGet.Config
#            echo "Created NuGet.Config at ~/.nuget/NuGet/NuGet.Config"
#          }
#      - name: Set NuGet API Key for GitHub Packages
#        env:
#          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg.exe
#          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
#        shell: ${{ matrix.cmake_shell }}
#        run: |
#          if ("${{ runner.os }}" -eq "Windows") {
#            $nuget_path = & "${{ env.VCPKG_EXE }}" fetch nuget | Select-String -Pattern '\S+\.exe$' | ForEach-Object { $_.Matches[0].Value }
#            if (-not $nuget_path) { Write-Error "Failed to get nuget.exe path."; exit 1 }
#            & "$nuget_path" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | Write-Host
#          } else {
#            NUGET_PATH=$(mono "${{ env.VCPKG_EXE }}" fetch nuget | tail -n 1)
#            if [ -z "$NUGET_PATH" ]; then echo "Failed to get nuget.exe path." && exit 1; fi
#            mono "$NUGET_PATH" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | cat
#          }
#          Write-Host "API Key for GitHubPackages set successfully."
#      - name: Configure CMake and Install Vcpkg Dependencies
#        working-directory: ${{ github.workspace }}/it-tools-editor
#        env:
#          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite"
#          VCPKG_INSTALL_OPTIONS: "--debug"
#          VCPKG_NUGET_ACCESSTOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
#        shell: ${{ matrix.cmake_shell }}
#        run: |
#          # Determine Ninja path dynamically (for Windows, on Linux/macOS 'ninja' is typically in PATH)
#          if ("${{ runner.os }}" -eq "Windows") {
#              # For MSVC (x64-windows), let CMake find Ninja, it's typically bundled or in PATH
#              # For MinGW (x64-mingw-dynamic), find it from msys2 setup
#              if ("${{ matrix.vcpkg_triplet }}" -eq "x64-windows") {
#                  $cmake_make_program_arg = "" # Let CMake find its bundled Ninja (often with VS)
#              } else { # For MinGW
#                  $ninja_path = (Get-Command ninja -ErrorAction SilentlyContinue).Path
#                  if (-not $ninja_path) { Write-Error "Ninja not found!"; exit 1 }
#                  $cmake_make_program_arg = "-DCMAKE_MAKE_PROGRAM=`"$ninja_path`""
#              }
#              # If using x64-windows, VCPKG_DEFAULT_HOST_TRIPLET should align
#              $host_triplet_arg = "-DVCPKG_DEFAULT_HOST_TRIPLET=x64-windows"
#          } else {
#              NINJA_PATH=$(which ninja)
#              if [ -z "$NINJA_PATH" ]; then echo "Ninja not found!" && exit 1; fi
#              cmake_make_program_arg="-DCMAKE_MAKE_PROGRAM=$NINJA_PATH"
#              $host_triplet_arg = "" # Not typically set for Linux/macOS like this
#          }
#
#          cmake -B build ${{ matrix.cmake_line_continuation }}
#                -S . ${{ matrix.cmake_line_continuation }}
#                -G "Ninja" ${{ matrix.cmake_line_continuation }}
#                -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" ${{ matrix.cmake_line_continuation }}
#                -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} ${{ matrix.cmake_line_continuation }}
#                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.cmake_line_continuation }}
#                $host_triplet_arg ${{ matrix.cmake_line_continuation }}
#                $cmake_make_program_arg
#      - name: Build Project
#        working-directory: ${{ github.workspace }}/it-tools-editor/build
#        shell: ${{ matrix.cmake_shell }}
#        run: cmake --build . --config ${{ matrix.build_type }}
#      - name: Upload Build Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ runner.os }}-${{ matrix.build_type }}-build-artifacts
#          path: ${{ github.workspace }}/it-tools-editor/build/ # Adjust to your actual build output path
#          retention-days: 5
#        if: success()
