# .github/workflows/release.yml
name: release.yml

on:
  release:
    types: [ published ]

jobs:
  # This job triggers the reusable workflow for each matrix combination
  build_and_package:
    permissions:
      contents: write
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows
            generator: "Visual Studio 17 2022"
            arch: x64
    #          - os: ubuntu-latest
    #            vcpkg_triplet: x64-linux
    #          - os: macos-latest
    #            vcpkg_triplet: x64-osx

    uses: ./.github/workflows/reusable-build.yml # Calls the reusable workflow

    with:
      os: ${{ matrix.os }}
      build_type: ${{ matrix.build_type }}
      vcpkg_triplet: ${{ matrix.vcpkg_triplet }}
      generator: ${{ matrix.generator }}
      arch: ${{ matrix.arch }}

    secrets:
      GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

  # A separate job that runs only for Release builds on Windows and publishes
  publish_release:
    needs: build_and_package # This job depends on the build completing
    if: success()
    runs-on: ubuntu-latest # Can be a single runner, as it only downloads and uploads

    permissions:
      contents: write
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows
            generator: "Visual Studio 17 2022"
            arch: x64

    steps:
      - name: Get Release Information (from trigger, if this is a release workflow)
        run: |
          echo "Release Tag: ${{ github.ref }}"
          echo "Release Upload URL: ${{ github.event.release.upload_url }}"
          # For 'release' event, the upload_url is direct.
          # For 'push' to main (as configured here), you might need to find/create a release.

      - name: Download Windows Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-build-artifacts # Specific artifact name for Windows Release build
          path: ./windows-release-build/

      - name: List Downloaded Artifacts
        run: ls -R ./windows-release-build/;
        shell: bash

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/windows-release-build/setup-buraq-${{ matrix.os }}-${{ github.event.release.tag_name || 'x.x.x-dev' }}.exe
          asset_content_type: application/octet-stream
          asset_name: "setup-buraq-${{ matrix.os }}-${{ github.event.release.tag_name || 'x.x.x-dev' }}.exe"

  generate-manifest:
    needs: publish_release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grants write access to repository contents, including releases.
      actions: read
    steps:
      - name: Install jq (if not pre-installed on runner)
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Fetch Latest Release Data & Generate Manifest
        # For scheduled runs, inputs are not available directly in github.event.inputs
        # So we use an OR condition for REPO_PATH and OUTPUT_FILE, or set fixed values.
        # For this example, let's assume a scheduled run targets a specific repo,
        # or you could use repository secrets if the target repo is sensitive/configurable.
        env:
          REPO_PATH: ${{ github.event.inputs.repository || 'jqlang/jq' }} # For scheduled, defaults to 'jqlang/jq'
          OUTPUT_FILE: ${{ github.event.inputs.output_filename || 'manifest.json' }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GitHub token
        run: |
          echo "Target Repository: $REPO_PATH"
          API_URL="https://api.github.com/repos/${REPO_PATH}/releases/latest"
          echo "Fetching latest release data from ${API_URL}..."

          # Use -w to get HTTP status, handle errors more robustly
          HTTP_RESPONSE_CODE=$(curl -sL -w "%{http_code}" -o response.json \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL")

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ]; then
            echo "Error: Failed to fetch release data from GitHub API."
            echo "HTTP Status Code: $HTTP_RESPONSE_CODE"
            echo "API URL: $API_URL"
            echo "Response:"
            cat response.json # Show error response from GitHub API
            exit 1
          fi

          LATEST_RELEASE_DATA=$(cat response.json)

          # Check for common error messages or empty data
          if [ -z "$LATEST_RELEASE_DATA" ] || \
             echo "$LATEST_RELEASE_DATA" | jq -e '.message == "Not Found"' > /dev/null || \
             echo "$LATEST_RELEASE_DATA" | jq -e '.tag_name == null' > /dev/null; then
            echo "Error: No releases found for '${REPO_PATH}', repository not found, or release data is incomplete."
            echo "Raw Response:"
            echo "$LATEST_RELEASE_DATA"
            exit 1
          fi

          echo "Successfully fetched release data."
          # For debugging, you can uncomment the next line:
          # echo "$LATEST_RELEASE_DATA" | jq .

          VERSION=$(echo "$LATEST_RELEASE_DATA" | jq -r '.tag_name // ""')
          RELEASE_DATE=$(echo "$LATEST_RELEASE_DATA" | jq -r '.published_at // ""')
          NOTES=$(echo "$LATEST_RELEASE_DATA" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$LATEST_RELEASE_DATA" | jq -r '.html_url // ""')

          if [ -z "$VERSION" ]; then
              echo "Warning: Could not extract 'tag_name' (version) from the release data."
              VERSION="N/A" # Set a default or handle as an error
          fi
          echo "Latest version found: ${VERSION}"

          ASSETS_JSON=$(echo "$LATEST_RELEASE_DATA" | jq '
            if .assets and (.assets | length > 0) then
              [.assets[]? | select(.name and .browser_download_url and .size) | {
                name: .name,
                download_url: .browser_download_url,
                size: .size,
                content_type: (if .content_type then .content_type else "application/octet-stream" end)
              }]
            else
              [] # Default to an empty array if no assets or .assets is null/empty
            end
          ')

          echo "Constructing $OUTPUT_FILE..."
          jq -n \
            --arg version "$VERSION" \
            --arg release_date "$RELEASE_DATE" \
            --arg notes "$NOTES" \
            --arg release_url "$RELEASE_URL" \
            --argjson assets "$ASSETS_JSON" \
            '{
              version: $version,
              release_date: $release_date,
              release_url: $release_url,
              notes: $notes,
              assets: $assets
            }' > "$OUTPUT_FILE"

          if [ $? -eq 0 ]; then
            echo "Successfully created '$OUTPUT_FILE' for version ${VERSION}."
            echo "Manifest content:"
            cat "$OUTPUT_FILE"
          else
            echo "Error: Failed to create '$OUTPUT_FILE' using jq."
            exit 1
          fi

      - name: List Downloaded Artifacts
        run: ls -R .
        shell: bash

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./manifest.json
          asset_content_type: application/json
          asset_name: manifest.json
