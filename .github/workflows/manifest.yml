name: manifest.yml
on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
    inputs:
      repository:
        description: 'GitHub repository (OWNER/REPO) to fetch the latest release from'
        required: true
        default: 'tkasozi/it-tools-editor'
      output_filename:
        description: 'Name of the output manifest file'
        required: false
        default: 'manifest.json'
  schedule:
    # Example: Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'

permissions:
  contents: write

jobs:
  generate-manifest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (needed if committing manifest back)
        # This step checks out the repository where the workflow is running.
        # It's required if you want to commit the generated manifest.json back into this repo.
        # If you only want to upload it as an artifact, this step can be optional,
        # but it's generally good practice to include it.
        uses: actions/checkout@v4

      - name: Install jq (if not pre-installed on runner)
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Fetch Latest Release Data & Generate Manifest
        # For scheduled runs, inputs are not available directly in github.event.inputs
        # So we use an OR condition for REPO_PATH and OUTPUT_FILE, or set fixed values.
        # For this example, let's assume a scheduled run targets a specific repo,
        # or you could use repository secrets if the target repo is sensitive/configurable.
        env:
          REPO_PATH: ${{ github.event.inputs.repository || 'jqlang/jq' }} # For scheduled, defaults to 'jqlang/jq'
          OUTPUT_FILE: ${{ github.event.inputs.output_filename || 'manifest.json' }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GitHub token
        run: |
          echo "Target Repository: $REPO_PATH"
          API_URL="https://api.github.com/repos/${REPO_PATH}/releases/latest"
          echo "Fetching latest release data from ${API_URL}..."

          # Use -w to get HTTP status, handle errors more robustly
          HTTP_RESPONSE_CODE=$(curl -sL -w "%{http_code}" -o response.json \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL")

          if [ "$HTTP_RESPONSE_CODE" -ne 200 ]; then
            echo "Error: Failed to fetch release data from GitHub API."
            echo "HTTP Status Code: $HTTP_RESPONSE_CODE"
            echo "API URL: $API_URL"
            echo "Response:"
            cat response.json # Show error response from GitHub API
            exit 1
          fi

          LATEST_RELEASE_DATA=$(cat response.json)

          # Check for common error messages or empty data
          if [ -z "$LATEST_RELEASE_DATA" ] || \
             echo "$LATEST_RELEASE_DATA" | jq -e '.message == "Not Found"' > /dev/null || \
             echo "$LATEST_RELEASE_DATA" | jq -e '.tag_name == null' > /dev/null; then
            echo "Error: No releases found for '${REPO_PATH}', repository not found, or release data is incomplete."
            echo "Raw Response:"
            echo "$LATEST_RELEASE_DATA"
            exit 1
          fi

          echo "Successfully fetched release data."
          # For debugging, you can uncomment the next line:
          # echo "$LATEST_RELEASE_DATA" | jq .

          VERSION=$(echo "$LATEST_RELEASE_DATA" | jq -r '.tag_name // ""')
          RELEASE_DATE=$(echo "$LATEST_RELEASE_DATA" | jq -r '.published_at // ""')
          NOTES=$(echo "$LATEST_RELEASE_DATA" | jq -r '.body // ""')
          RELEASE_URL=$(echo "$LATEST_RELEASE_DATA" | jq -r '.html_url // ""')

          if [ -z "$VERSION" ]; then
              echo "Warning: Could not extract 'tag_name' (version) from the release data."
              VERSION="N/A" # Set a default or handle as an error
          fi
          echo "Latest version found: ${VERSION}"

          ASSETS_JSON=$(echo "$LATEST_RELEASE_DATA" | jq '
            if .assets and (.assets | length > 0) then # Check if .assets exists and is not empty
              [.assets[]? | select(.name and .browser_download_url and .size) | {
                name: .name,
                download_url: .browser_download_url,
                size: .size,
                content_type: .content_type '//' "application/octet-stream"
              }]
            else
              [] # Default to an empty array if no assets or .assets is null/empty
            end
          ')

          echo "Constructing $OUTPUT_FILE..."
          jq -n \
            --arg version "$VERSION" \
            --arg release_date "$RELEASE_DATE" \
            --arg notes "$NOTES" \
            --arg release_url "$RELEASE_URL" \
            --argjson assets "$ASSETS_JSON" \
            '{
              version: $version,
              release_date: $release_date,
              release_url: $release_url,
              notes: $notes,
              assets: $assets
            }' > "$OUTPUT_FILE"

          if [ $? -eq 0 ]; then
            echo "Successfully created '$OUTPUT_FILE' for version ${VERSION}."
            echo "Manifest content:"
            cat "$OUTPUT_FILE"
          else
            echo "Error: Failed to create '$OUTPUT_FILE' using jq."
            exit 1
          fi

      - name: Upload Manifest Artifact
        uses: actions/upload-artifact@v4
        with:
          name: manifest-output # Name of the artifact bundle
          path: ${{ github.event.inputs.output_filename || 'manifest.json' }} # Path to the file to upload

      # --- Optional: Commit and Push manifest.json ---
      # Uncomment the following steps if you want to commit the generated file
      # back to the repository where the workflow runs.
      # Make sure you have set `permissions: contents: write` at the job or workflow level.
      #
      # - name: Configure Git
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #
      # - name: Commit and Push Manifest
      #   env:
      #     # Use the actual REPO_PATH and OUTPUT_FILE determined in the previous step
      #     REPO_PATH_FOR_COMMIT_MSG: ${{ github.event.inputs.repository || 'jqlang/jq' }}
      #     OUTPUT_FILE_TO_COMMIT: ${{ github.event.inputs.output_filename || 'manifest.json' }}
      #   run: |
      #     git add "$OUTPUT_FILE_TO_COMMIT"
      #     # Check if there are changes to commit
      #     if git diff --staged --quiet; then
      #       echo "No changes to commit in $OUTPUT_FILE_TO_COMMIT."
      #     else
      #       git commit -m "Update $OUTPUT_FILE_TO_COMMIT from ${REPO_PATH_FOR_COMMIT_MSG} latest release"
      #       echo "Pushing changes..."
      #       git push
      #       echo "$OUTPUT_FILE_TO_COMMIT committed and pushed."
      #     fi