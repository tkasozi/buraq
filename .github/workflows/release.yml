# .github/workflows/callable-build-logic.yml
name: Reusable Build Logic

# This workflow can be called by other workflows
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        description: 'Runner operating system'
      build_type:
        required: true
        type: string
        description: 'Build configuration (Debug/Release)'
      vcpkg_triplet:
        required: true
        type: string
        description: 'Vcpkg triplet for the target platform'
      # You might also pass secrets and other complex inputs
      gh_packages_token:
        required: true
        type: secret
        description: 'GitHub Packages PAT'

    outputs:
      # If your build logic produces outputs needed by the caller
      build_success:
        description: "Whether the build was successful"
        value: ${{ jobs.build_component.outputs.build_successful }}
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build_component.outputs.artifact_name }}

jobs:
  build_component:
    runs-on: ${{ inputs.os }}
    permissions:
      contents: read
      packages: write # Necessary if this reusable workflow interacts with GitHub Packages
    outputs:
      build_successful: ${{ steps.build_project_step.outcome == 'success' }}
      artifact_name: ${{ inputs.os }}-${{ inputs.build_type }}-build-artifacts # Example, match your upload name

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: it-tools-editor # Clones into a consistent path
          fetch-depth: 0

      # All your existing build steps go here (from cloning vcpkg, setup, build, etc.)
      # They will use `inputs.os`, `inputs.build_type`, `inputs.vcpkg_triplet`, and `secrets.GH_PACKAGES_TOKEN`

      - name: Clone Vcpkg Repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          ref: master
          path: vcpkg
          fetch-depth: 0

      - name: Bootstrap Vcpkg (Windows)
        if: inputs.os == 'Windows'
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
        shell: pwsh

      - name: Bootstrap Vcpkg (Linux/macOS)
        if: inputs.os != 'Windows'
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh
        shell: bash

      # ... (include all other build steps here, configuring NuGet, CMake, building) ...

      - name: Build Project Step (Example)
        id: build_project_step # Give it an ID to check outcome
        working-directory: ${{ github.workspace }}/build
        shell: ${{ inputs.os == 'Windows' && 'pwsh' || 'bash' }}
        run: |
          # Simplified for example
          cmake --build . --config ${{ inputs.build_type }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os }}-${{ inputs.build_type }}-build-artifacts
          path: ${{ github.workspace }}/build/ # Adjust to your actual build output path
          retention-days: 5
        if: success()
