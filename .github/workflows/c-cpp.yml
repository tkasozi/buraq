name: Build and Package
on:
  release:
   types: [published]
#  push:
#    branches:
#     - 19-prepare-a-pre-release-v0012

env:
  APP_NAME: "IT-Tools"
  CI: True
  DOTNET_VERSION: 9.0
  CMAKE_EXE: "cmake"
  
permissions:
  contents: write

jobs:
  build-and-package:
    runs-on: windows-latest # Or a specific Windows version
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows # Ensure triplet is consistently set
      VCPKG_INSTALL_OPTIONS: "--debug"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      # --- Step 1: Setup MSYS2 for build environment ---
      # This provides the MinGW-w64 toolchain (GCC, make) that Vcpkg will use.
      - name: Setup MSYS2 for build environment (Provides MinGW toolchain)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            coreutils
            bash
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            mingw-w64-x86_64-ninja

      - name: Read application executable name
        id: app-name
        run: echo "CMAKE_MAKE_PROGRAM=$(where ninja)" >> $GITHUB_ENV
      # --- Step 2: Setup Vcpkg and Install Dependencies with Cache ---
      # This step depends on the MinGW toolchain being available from the previous step.
      - name: Setup Vcpkg and Install Dependencies with Cache
        uses: lukka/run-vcpkg@v11
        id: vcpkg # Give this step an ID to access its outputs
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: '${{ github.workspace }}/vcpkg.json'
          runVcpkgInstall: true
          vcpkgTriplet: '${{ env.VCPKG_DEFAULT_TRIPLET }}'
          vcpkgCacheKeySuffix: |
            ${{ runner.os }}-${{ env.VCPKG_DEFAULT_TRIPLET }}-

      - name: Download Inno Setup
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe?site=1" -OutFile "inno_setup.exe"
          Start-Process -Wait -FilePath "inno_setup.exe" -ArgumentList "/SILENT"
        shell: powershell

      - name: Setup .NET SDK ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build Managed project
        id: dotnet-project
        run: |
         cd ManagedLibrary
          
         ./build.sh
        shell: bash

      - name: Build project
        run: |
          # Optional: Verify environment for debugging
          echo "Current PATH: $PATH"
          echo "CMake version: $(cmake --version)"
          echo "GCC version: $(gcc --version)"
          echo "Looking for Qt6 CMake files in /mingw64/lib/cmake/Qt6..."
          # ls -Al /mingw64/lib/cmake/Qt6 || echo "Qt6 CMake directory not found or empty."
          
          echo "CMAKE_PREFIX_PATH is set to: $CMAKE_PREFIX_PATH"
          
          echo "VCPKG_ROOT is: $VCPKG_ROOT"
          echo "CMAKE_TOOLCHAIN_FILE is: $CMAKE_TOOLCHAIN_FILE"
          
          # build.sh script's CMake configure command should now implicitly
          # use the Vcpkg toolchain via the CMAKE_TOOLCHAIN_FILE env var.
          # Ensure it does NOT manually set compiler or toolchain paths.
          ./build.sh --clean
          
          echo "PATH: $PATH"
          
          #          # ls -Al "D:/a/_temp/msys64/mingw64/bin/"
          #          
          #          mkdir ./build/Release
          #          mkdir ./build/Release/plugins
          #
          #          cp ./build/bin/ITools.exe ./build/Release
          #          
          #          cp ./build/bin/*.dll ./build/Release
          #          cp ./build/bin/qt.conf ./build/Release
          #          cp ./build/bin/workflow.ico ./build/Release
          #          
          #          mkdir ./build/Release/plugins/managed
          #          cp -r ./build/bin/plugins/managed/* ./build/Release/plugins/managed
          #          
          #          mkdir ./build/Release/plugins/ext
          #          cp ./build/bin/plugins/ext/* ./build/Release/plugins/ext
          #          
          #          D:/a/_temp/msys64/mingw64/bin/windeployqt-qt6.exe --verbose 2 --dir "./build/Release" --plugindir "./build/Release/plugins" "./build/Release/ITools.exe"
          #          
          #          echo "--- Listing deployment directory contents ---"
          echo "*******Build Dir**************"
          ls -alh ./build
          
          echo "*******Build/Release Dir**************"
          ls -alh ./build/Release
        env:
          MINGW_COMPILER_BIN_DIR: /mingw64/bin
          CMAKE_DOTNET_TARGET_FRAMEWORK: ${{ env.DOTNET_ROOT }}/packs/Microsoft.NETCore.App.Host.win-x64/9.0.5/runtimes/win-x64/native
        shell: msys2 {0}

      - name: Find application executable
        id: find-exe
        run: |
          Get-ChildItem -Path "${{ github.workspace }}/build/Release" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty Name | Out-File -FilePath app_exe_name.txt
        shell: powershell

      - name: Read application executable name
        id: app-name
        run: echo "APP_NAME=$(cat app_exe_name.txt)" >> $GITHUB_ENV

      - name: Generate installer with Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ${{ github.workspace }}/it-tools.iss
        env:
          APP_VERSION: ${{ github.event.release.tag_name }} # Assuming your release tag follows a versioning scheme
          OUTPUT_DIR: ${{ github.workspace }}/Output
          APP_BINARY: ${{ github.workspace }}/build/Release/${{ secrets.APP_NAME }}
        shell: powershell

      - name: Create release archive
        uses: thedoctor0/zip-release@master
        with:
          filename: ${{ env.APP_NAME }}-${{ github.event.release.tag_name }}-${{ runner.os }}.zip
          directory: ${{ github.workspace }}/Output

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/OUTPUT/${{ env.APP_NAME }}-${{ github.event.release.tag_name }}-${{ runner.os }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ github.event.release.tag_name }}-${{ runner.os }}.zip
          asset_content_type: application/zip
