# .github/workflows/release.yml
name: release.yml

on:
  release:
    types: [ published ]
  pull_request: # <-- THIS IS THE KEY CHANGE
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - 'main'
    paths-ignore: # IMPORTANT: Prevent infinite loop if this workflow's PR is merged
      - 'manifest.json'

jobs:
  # This job triggers the reusable workflow for each matrix combination
  build_and_package:
    permissions:
      contents: write
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows
            generator: "Visual Studio 17 2022"
            arch: x64
    #          - os: ubuntu-latest
    #            vcpkg_triplet: x64-linux
    #          - os: macos-latest
    #            vcpkg_triplet: x64-osx

    uses: ./.github/workflows/reusable-build.yml # Calls the reusable workflow

    with:
      os: ${{ matrix.os }}
      build_type: ${{ matrix.build_type }}
      vcpkg_triplet: ${{ matrix.vcpkg_triplet }}
      generator: ${{ matrix.generator }}
      arch: ${{ matrix.arch }}

    secrets:
      GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

  # A separate job that runs only for Release builds on Windows and publishes
  publish_release:
    needs: build_and_package # This job depends on the build completing
    if: success()
    runs-on: ubuntu-latest # Can be a single runner, as it only downloads and uploads

    permissions:
      contents: write
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows
            generator: "Visual Studio 17 2022"
            arch: x64

    steps:
      - name: Get Release Information (from trigger, if this is a release workflow)
        run: |
          echo "Release Tag: ${{ github.ref }}"
          echo "Release Upload URL: ${{ github.event.release.upload_url }}"
          # For 'release' event, the upload_url is direct.
          # For 'push' to main (as configured here), you might need to find/create a release.

      - name: Download Windows Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-build-artifacts # Specific artifact name for Windows Release build
          path: ./windows-release-build/

      - name: List Downloaded Artifacts
        run: ls -R ./windows-release-build/;
        shell: bash

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/windows-release-build/setup-buraq-${{ matrix.os }}-${{ github.event.release.tag_name || 'x.x.x-dev' }}.exe
          asset_content_type: application/octet-stream
          asset_name: "setup-buraq-${{ matrix.os }}-${{ github.event.release.tag_name || 'x.x.x-dev' }}.exe"

  generate-manifest:
    needs: publish_release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grants write access to repository contents, including releases.
      packages: write
      pull-requests: write

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.GH_BOT_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # pulls all history and tags
          token: ${{ steps.app-token.outputs.token }}

      - name: Generate manifest.json
        id: generate_manifest # Give this step an ID to reference its outputs
        run: |
          # REPLACE THIS WITH YOUR ACTUAL COMMAND TO GENERATE manifest.json
          # Example:
          MANIFEST_VERSION="1.0.${{ github.run_number }}"
          echo '{
          "version": "'"$MANIFEST_VERSION"'",
          "buildDate": "$(date +%Y-%m-%d)",
          "commitSha": "${{ github.sha }}"
          }' > manifest.json
          echo "Generated manifest.json content:"
          cat manifest.json
          echo "::set-output name=manifest_version::$MANIFEST_VERSION" # Output the version for the PR message

      - name: Check for changes to manifest.json
        id: git_status_check
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifest.json
          # Use 'git diff --staged --quiet' to check if anything was actually added/changed
          if git diff --staged --quiet; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            echo "No changes detected in manifest.json. Skipping PR creation."
          else
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
            echo "Changes detected in manifest.json. Proceeding to create PR."
          fi

      - name: Create Pull Request for manifest.json
        id: create_pr
        # Only run this step if actual changes were detected in manifest.json
        if: steps.git_status_check.outputs.no_changes == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app-token.outputs.token }} # app-token "is the id of the step"
          commit-message: "chore: Update generated manifest.json for v${{ steps.generate_manifest.outputs.manifest_version }} [skip ci]"
          title: "Chore: Auto-update manifest.json"
          body: |
            This pull request automatically updates the `manifest.json` file.
            - Generated by workflow run: `${{ github.run_id }}`
            - Actor: `${{ github.actor }}`
            - From commit: `${{ github.sha }}`
            - Manifest Version: `${{ steps.generate_manifest.outputs.manifest_version }}`
          branch: auto-update-manifest-${{ github.run_number }} # Name of the new branch for the PR
          base: main # The branch to create the PR against (your protected branch)
          delete-branch: true # Clean up the temporary branch after merge
          labels: |
            automated
            chore

      - name: Enable Auto-Merge for Bot PR
        if: github.actor == 'github-actions[bot]' || github.actor == 'tkasozi' # Replace with YOUR actual App's bot name
        run: |
          gh pr merge --auto --merge "${{ env.PULL_REQUEST_NUMBER }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release and Upload Manifest
        uses: softprops/action-gh-release@v1
        with:
          # If true, a new release will be created. If false, it tries to update an existing release for the tag.
          # Usually, you want to create a new one when a new tag is pushed.
          generate_release_notes: true # Auto-generate release notes based on commits
          files: ./manifest.json # Path to the manifest file to upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
