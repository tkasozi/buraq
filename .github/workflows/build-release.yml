name: Matrix Build and Deploy

on: [ push, pull_request ]

env:
  APP_NAME: "IT-Tools"
  CI: True
  DOTNET_SDK_VERSION: 9.0.303
  DOTNET_VERSION: 9.0.7
  CMAKE_EXE: "cmake"

permissions:
  contents: write

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          path: it-tools-editor
          fetch-depth: 0

      - name: Archive and Upload it-tools-editor as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: it-tools-editor
          path: ${{ github.workspace }}/it-tools-editor/


  build:
    needs: init
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        build_type: [ Release ]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows
            generator: "Visual Studio 17 2022"
            arch: x64
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux
          - os: macos-latest
            vcpkg_triplet: x64-osx
    steps:
      - name: Restore job artifact
        uses: actions/download-artifact@v4
        with:
          name: it-tools-editor
          path: ${{ github.workspace }}

      - name: Clone Vcpkg Repository
        if: ${{ github.workspace }}/it-tools-editor/vcpkg == '' || !contains(github.workspace, 'it-tools-editor/vcpkg')
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          ref: master
          path: vcpkg
          fetch-depth: 0

      - name: Set up MSYS2 with Build Tools (Windows Only, if needed)
        if: runner.os == 'Windows' && matrix.vcpkg_triplet == 'x64-mingw-dynamic' # Only run if MinGW is used
        uses: msys2/setup-msys2@v2
        with:
          msys2-architecture: x86_64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            git
            ninja
          path-type: minimal
          msystem: MINGW64

      - name: Setup .NET SDK ${{ env.DOTNET_SDK_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Build Managed project
        id: dotnet-project
        run: |
          ls -alh
          
          cd ManagedLibrary
          
          ./build.sh

        shell: bash

      - name: Bootstrap Vcpkg (Windows)
        if: runner.os == 'Windows'
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
        shell: pwsh

      - name: Bootstrap Vcpkg (Linux/macOS)
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh
        if: runner.os != 'Windows'
        shell: bash

      - name: Configure NuGet for GitHub Packages (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          USERNAME: ${{ github.repository_owner }}
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          $nugetConfigPath = Join-Path $env:APPDATA "NuGet\NuGet.Config"
          $nugetConfigContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="GitHubPackages" value="https://nuget.pkg.github.com/$env:USERNAME/index.json" />
            </packageSources>
            <packageSourceCredentials>
              <GitHubPackages>
                <add key="Username" value="$env:USERNAME" />
                <add key="ClearTextPassword" value="$env:GH_PACKAGES_TOKEN" />
              </GitHubPackages>
            </packageSourceCredentials>
          </configuration>
          "@
          New-Item -ItemType Directory -Force -Path (Split-Path $nugetConfigPath)
          $nugetConfigContent | Out-File $nugetConfigPath
          Write-Host "Created NuGet.Config at $nugetConfigPath"

      - name: Configure NuGet for GitHub Packages (Linux/macOS)
        env:
          USERNAME: ${{ github.repository_owner }}
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p ~/.nuget/NuGet
          echo '<?xml version="1.0" encoding="utf-8"?>' > ~/.nuget/NuGet/NuGet.Config
          echo '<configuration>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  <packageSources>' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <clear />' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <add key="GitHubPackages" value="https://nuget.pkg.github.com/'"${{ env.USERNAME }}"'/index.json" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '  </packageSources>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  <packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
          echo '      <add key="Username" value="'"${{ env.USERNAME }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '      <add key="ClearTextPassword" value="'"${{ env.GH_PACKAGES_TOKEN }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '    </GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  </packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
          echo '</configuration>' >> ~/.nuget/NuGet/NuGet.Config
          echo "Created NuGet.Config at ~/.nuget/NuGet/NuGet.Config"

      - name: Set NuGet API Key for GitHub Packages (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg.exe
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          $nuget_path = & "${{ env.VCPKG_EXE }}" fetch nuget | Select-String -Pattern '\S+\.exe$' | ForEach-Object { $_.Matches[0].Value }
          if (-not $nuget_path) { Write-Error "Failed to get nuget.exe path."; exit 1 }
          & "$nuget_path" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | Write-Host
          
          Write-Host "API Key for GitHubPackages set successfully."

      - name: Set NuGet API Key for GitHub Packages  (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg.exe
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          NUGET_PATH=$(mono "${{ env.VCPKG_EXE }}" fetch nuget | tail -n 1)
          if [ -z "$NUGET_PATH" ]; then echo "Failed to get nuget.exe path." && exit 1; fi
          mono "$NUGET_PATH" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | cat

      - name: Cache Vcpkg Asset Downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/downloads
            ${{ github.workspace }}/vcpkg/toolsrc
          key: ${{ runner.os }}-${{ matrix.build_type }}-vcpkg-assets-${{ hashFiles('it-tools-editor/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-assets-

      - name: Configure CMake and Install Vcpkg Dependencies
        working-directory: ${{ github.workspace }}
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite"
          VCPKG_INSTALL_OPTIONS: "--debug"
          VCPKG_NUGET_ACCESSTOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          CMAKE_DOTNET_TARGET_FRAMEWORK: ${{ env.DOTNET_ROOT }}/packs/Microsoft.NETCore.App.Host.win-x64/${{ env.DOTNET_VERSION }}/runtimes/win-x64/native
        shell: bash
        run: |
          echo "******Dotnet at ${{ env.DOTNET_ROOT }}/packs: **********"
          ls -al "${{ env.DOTNET_ROOT }}/packs/Microsoft.NETCore.App.Host.win-x64"
          
          echo "****************${CMAKE_DOTNET_TARGET_FRAMEWORK}******************"
          ls -al "${CMAKE_DOTNET_TARGET_FRAMEWORK}"
          
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # For MSVC (x64-windows), let CMake find Ninja, it's typically bundled or in PATH
            # For MinGW (x64-mingw-dynamic), find it from msys2 setup
          
            # Initialize variables for the Windows case
            cmake_make_program_arg=""
            host_triplet_arg="-DVCPKG_DEFAULT_HOST_TRIPLET=x64-windows" # Default for Windows host
          
            if [[ "${{ matrix.vcpkg_triplet }}" == "x64-windows" ]]; then
            # If using x64-windows triplet, CMake usually finds Ninja automatically
            # so cmake_make_program_arg remains empty.
            true # No-op
            else # For MinGW (x64-mingw-dynamic)
            # Use 'command -v' for a more robust way to find executables in PATH than 'which'
            ninja_path=$(command -v ninja)
            if [[ -z "$ninja_path" ]]; then
            echo "Error: Ninja not found in PATH for MinGW build!" >&2
            exit 1
            fi
            # Ensure path is correctly quoted for CMake if it contains spaces
            cmake_make_program_arg="-DCMAKE_MAKE_PROGRAM=\"$ninja_path\""
          fi
          else # For Linux/macOS
          
          # Use 'command -v' for a more robust way to find executables in PATH
          ninja_path=$(command -v ninja)
          if [[ -z "$ninja_path" ]]; then
              echo "Error: Ninja not found in PATH!" >&2
          exit 1
          fi
          cmake_make_program_arg="-DCMAKE_MAKE_PROGRAM=$ninja_path"
          host_triplet_arg="" # Not typically set for Linux/macOS like this
          fi

          # Now use cmake_make_program_arg and host_triplet_arg in your cmake command
          # Example of how you'd use them (assuming you have a line_continuation variable defined):
          cmake -B build \
               -S . \
               -G "${{ matrix.generator }}" \
               -A ${{ matrix.arch }} \
               -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
               -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} \
               -DVCPKG_DEFAULT_HOST_TRIPLET=${{ matrix.vcpkg_triplet }} \
               -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
               -DCMAKE_DOTNET_TARGET_FRAMEWORK="${CMAKE_DOTNET_TARGET_FRAMEWORK}"  \
               "${host_triplet_arg}"

      - name: Build Project (Windows - MSVC)
        if: runner.os == 'Windows' && matrix.vcpkg_triplet == 'x64-windows'  && success()
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config ${{ matrix.build_type }}
        # Use cmd to ensure vcvars64.bat context persists from the configure step
        shell: cmd

      - name: Build Project (Windows - MinGW)
        if: runner.os == 'Windows' && matrix.vcpkg_triplet == 'x64-mingw-dynamic' && success()
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config ${{ matrix.build_type }}
        shell: pwsh # Use pwsh to continue the MinGW context

      - name: Build Project (Linux/macOS)
        if: runner.os != 'Windows'  && success()
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config ${{ matrix.build_type }}
        shell: bash

      - name: Show Created files after build
        run: ls -al .; echo "*****************************\n\n"; ls -al ./build; ls -al ./build/build
        shell: bash

      - name: Download Inno Setup
        if: runner.os == 'Windows'  && success()
        run: |
              Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe?site=1" -OutFile "inno_setup.exe"
              Start-Process -Wait -FilePath "inno_setup.exe" -ArgumentList "/SILENT"
        shell: powershell

      - name: Find application executable
        if: runner.os == 'Windows'  && success()
        id: find-exe
        run: |
          Get-ChildItem -Path "${{ github.workspace }}/build/build" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty Name | Out-File -FilePath app_exe_name.txt
        shell: powershell

      - name: Read application executable name
        id: app-name
        run: echo "APP_NAME=$(cat app_exe_name.txt)" >> $GITHUB_ENV

      - name: Generate installer with Inno Setup
        if: runner.os == 'Windows'  && success()
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ${{ github.workspace }}/it-tools.iss
        env:
          APP_VERSION: ${{ github.event.release.tag_name || 'x.x.x-dev' }} # Assuming your release tag follows a versioning scheme
          OUTPUT_DIR: ${{ github.workspace }}/Output
          APP_BINARY: ${{ github.workspace }}/build/build/${{ secrets.APP_NAME }}
        shell: powershell

      - name: Generate installer with Inno Setup
        if: runner.os == 'Windows'  && success()
        env:
          APP_VERSION: ${{ github.event.release.tag_name || 'x.x.x-dev' }} # Assuming your release tag follows a versioning scheme
          OUTPUT_DIR: ${{ github.workspace }}/Output
          APP_BINARY: ${{ github.workspace }}/build/build
        run: |
            $innoSetupExe = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
            $innoScriptPath = "${{ github.workspace }}/it-tools.iss"
            $outputDirForInno = "${{ github.workspace }}\InstallerOutput"
            
            & "$innoSetupExe" "$innoScriptPath" `
              /DAppVersion="${{ env.APP_VERSION }}" `
              /DOutputDir="$outputDirForInno" `
              /DAppBinaryDir="${{ env.APP_BINARY }}" `
              /DAppArchSupport="${{ matrix.arch }}compatible" `
              /DAppName="${{ env.APP_NAME }}" `
              /DAppExeName="${{ env.APP_NAME }}.exe" `
              /DAppOutputBaseFilename="setup-${{ runner.os }}-${{ matrix.build_type }}" `
              /F"setup-${{ runner.os }}-${{ matrix.build_type }}"
        shell: powershell

      - name: Show Created files after Inno Setup
        run: ls -al ./build/build
        shell: bash

      - name: Create release archive
        uses: thedoctor0/zip-release@master
        with:
          filename: ${{ env.APP_NAME }}-${{ github.event.release.tag_name }}-${{ runner.os }}.zip
          directory: ${{ github.workspace }}/Output

      - name: Upload to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default GITHUB_TOKEN for release uploads
            ASSET_NAME: ${{ env.APP_NAME }}-${{ github.event.release.tag_name }}-${{ runner.os }}
        with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ${{ github.workspace }}/OUTPUT/${{ env.ASSET_NAME }}.zip
            asset_name: ${{ env.ASSET_NAME }}.zip
            asset_content_type: application/zip
