name: Build and Release

on:
  push:
    tags:
      - 'v*'

  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    env:
      PROJECT_NAME: buraq
      APP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0-dev' }}
      APP_EXE_NAME: "buraq-x64-${{ github.ref_type == 'tag' && github.ref_name || '0.0.0-dev' }}"
      OUTPUT_DIR: C:\app\Output
      APP_BINARY: C:\app\build\build

    permissions:
      contents: write
      packages: write # Required to push cache to GHCR
      actions: write

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v4

      - 
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry:  ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
  
      - 
        name: Build, Export, and Push
        run: |
          # Define the stable base image tag
          $BASE_IMAGE_TAG = "ghcr.io/${{ github.repository_owner }}/win-vcpkg-mingw64-qt-cpp-minimal:latest"
          
          # Define a separate tag for the build cache
          $CACHE_TAG = "ghcr.io/${{ github.repository_owner }}/win-vcpkg-mingw64-qt-cpp-minimal:latest-build-cache"
          
          # 1. Pull both the base and the last cache image to maximize cache hits
          docker pull $BASE_IMAGE_TAG || true
          docker pull $CACHE_TAG || true

          # 2. Build the new image
          docker build --cache-from $BASE_IMAGE_TAG --cache-from $CACHE_TAG -t $CACHE_TAG -f ./build.Dockerfile .

          # 3.1. Determine the exact .exe name from the build output on the runner
          $exeName = (Get-ChildItem -Path "${{ env.APP_BINARY }}" -Filter "*.exe" | Select-Object -First 1).Name
          if (-not $exeName) {
            Write-Error "Application executable not found in ${{ env.APP_BINARY }}"
            exit 1
          }
          $appName = $exeName.Replace(".exe", "")
          Write-Host "Found App EXE: $exeName"
          Write-Host "Derived App Name: $appName"

          # 3.2. Define paths for use INSIDE the Docker container.
          # We assume the runner's workspace is mounted to C:\app.
          $containerInnoScriptPath = "C:\app\buraq.iss"
          $containerOutputDir = "${{ env.OUTPUT_DIR }}"
          $containerAppBinaryDir = "${{ env.APP_BINARY }}"

          # 3.3. Run the Inno Setup compiler inside the Docker container with all arguments
          docker run --rm -v "${{ github.workspace }}:C:\app" ghcr.io/tkasozi/win-vcpkg-mingw64-qt-cpp-minimal:latest-build-cache`
            "ISCC.exe" `
            "$containerInnoScriptPath" `
            "/DAppName=$appName" `
            "/DAppExeName=$exeName" `
            "/DAppVersion=${{ env.APP_VERSION }}" `
            "/DOutputDir=$containerOutputDir" `
            "/DAppBinaryDir=$containerAppBinaryDir" `
            "/DAppArchSupport=x64compatible" `
            "/DAppOutputBaseFilename=setup-$appName"
          
          # 4. Create a temporary container to extract the artifact from
          docker create --name extractor $CACHE_TAG || true
          
          # 5. Copy the setup.exe from the container to the runner's workspace
          docker cp extractor:/app/Output/setup.exe ./setup.exe || true
          
          # 6. Push the new image to the registry
          docker push $CACHE_TAG
        shell: pwsh

      - 
        name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}

      - 
        name: Upload Release Asset (setup.exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/setup.exe
          asset_name: setup.exe
          asset_content_type: application/octet-stream
