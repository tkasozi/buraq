name: Build and Release

on:
  push:
    branches:
        - 'develop'
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write # Required to push cache to GHCR
      actions: write

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v4

      - 
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry:  ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
  
      - 
        name: Build, Export, and Push
        run: |
          # Define the stable base image tag
          $BASE_IMAGE_TAG = "ghcr.io/${{ github.repository_owner }}/win-vcpkg-mingw64-qt-cpp-minimal:latest"
          
          # Define a separate tag for the build cache
          $CACHE_TAG = "ghcr.io/${{ github.repository_owner }}/win-vcpkg-mingw64-qt-cpp-minimal:latest-build-cache"
          
          # 1. Pull both the base and the last cache image to maximize cache hits
          docker pull $BASE_IMAGE_TAG || true
          docker pull $CACHE_TAG || true

          # 2. Build the new image
          docker build --cache-from $BASE_IMAGE_TAG --cache-from $CACHE_TAG -t $CACHE_TAG -f ./build.Dockerfile .
          
          # 3. Create a temporary container to extract the artifact from
          docker create --name extractor $CACHE_TAG
          
          # 4. Copy the setup.exe from the container to the runner's workspace
          docker cp extractor:/app/Output/setup.exe ./setup.exe
          
          # 5. Push the new image to the registry
          docker push $CACHE_TAG
        shell: pwsh

      - 
        name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - 
        name: Upload Release Asset (setup.exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/setup.exe
          asset_name: setup.exe
          asset_content_type: application/octet-stream