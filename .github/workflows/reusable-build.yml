# .github/workflows/callable-build-logic.yml
name: Reusable Build Logic

env:
  CI: True
  DOTNET_SDK_VERSION: 9.0.303
  DOTNET_VERSION: 9.0.7
  CMAKE_EXE: "cmake"

# This workflow can be called by other workflows
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        description: 'Runner operating system'
      build_type:
        required: true
        type: string
        description: 'Build configuration (Debug/Release)'
      vcpkg_triplet:
        required: true
        type: string
        description: 'Vcpkg triplet for the target platform'
      generator:
        required: true
        type: string
        description: 'Build generator'
      arch:
        required: true
        type: string
        description: 'Supported Arch'

    secrets:
      GH_PACKAGES_TOKEN:
        required: true
        description: 'GitHub Packages PAT'

    outputs:
      # If your build logic produces outputs needed by the caller
      build_success:
        description: "Whether the build was successful"
        value: ${{ jobs.build_component.outputs.build_successful }}
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build_component.outputs.artifact_name }}

jobs:
  build_component:
    runs-on: ${{ inputs.os }}
    env:
      PROJECT_NAME: buraq
      APP_EXE_NAME: "buraq-${{ inputs.os }}-${{ github.event.release.tag_name || 'x.x.x-dev' }}"
      APP_VERSION: ${{ github.event.release.tag_name || 'x.x.x-dev' }} # Assuming your release tag follows a versioning scheme
      OUTPUT_DIR: ${{ github.workspace }}\buraq\Output
      APP_BINARY: ${{ github.workspace }}\buraq\build\build

    outputs:
      build_successful: ${{ steps.build_project_step.outcome == 'success' }}
      artifact_name: ${{ inputs.os }}-${{ inputs.build_type }}-build-artifacts
      executable_name: ${{ env.APP_EXE_NAME }}

    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          path: ${{ env.PROJECT_NAME }}
          fetch-depth: 0

      - name: Clone Vcpkg Repository
        if: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/vcpkg == '' || !contains(github.workspace, "${{ env.PROJECT_NAME }}/vcpkg")
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          ref: master
          path: vcpkg
          fetch-depth: 0

      - name: Set up MSYS2 with Build Tools (Windows Only, if needed)
        if: inputs.os == 'windows-latest' && inputs.vcpkg_triplet == 'x64-mingw-dynamic' # Only run if MinGW is used
        uses: msys2/setup-msys2@v2
        with:
          msys2-architecture: x86_64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            cmake
            ninja
          path-type: minimal
          msystem: MINGW64

      - name: Setup .NET SDK ${{ env.DOTNET_SDK_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Build Managed project
        id: dotnet-project
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}
        run: |
          ls -alh

          cd ManagedLibrary

          ./build.sh

        shell: bash

      - name: Bootstrap Vcpkg (Windows)
        if: inputs.os == 'windows-latest'
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
        shell: pwsh

      - name: Bootstrap Vcpkg (Linux/macOS)
        if: inputs.os != 'windows-latest'
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh
        shell: bash

      - name: Configure NuGet for GitHub Packages (Windows)
        if: inputs.os == 'windows-latest'
        shell: pwsh
        env:
          USERNAME: ${{ github.repository_owner }}
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          $nugetConfigPath = Join-Path $env:APPDATA "NuGet\NuGet.Config"
          $nugetConfigContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="GitHubPackages" value="https://nuget.pkg.github.com/$env:USERNAME/index.json" />
            </packageSources>
            <packageSourceCredentials>
              <GitHubPackages>
                <add key="Username" value="$env:USERNAME" />
                <add key="ClearTextPassword" value="$env:GH_PACKAGES_TOKEN" />
              </GitHubPackages>
            </packageSourceCredentials>
          </configuration>
          "@
          New-Item -ItemType Directory -Force -Path (Split-Path $nugetConfigPath)
          $nugetConfigContent | Out-File $nugetConfigPath
          Write-Host "Created NuGet.Config at $nugetConfigPath"


      - name: Configure NuGet for GitHub Packages (Linux/macOS)
        env:
          USERNAME: ${{ github.repository_owner }}
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        if: inputs.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p ~/.nuget/NuGet
          echo '<?xml version="1.0" encoding="utf-8"?>' > ~/.nuget/NuGet/NuGet.Config
          echo '<configuration>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  <packageSources>' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <clear />' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <add key="GitHubPackages" value="https://nuget.pkg.github.com/'"${{ env.USERNAME }}"'/index.json" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '  </packageSources>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  <packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
          echo '    <GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
          echo '      <add key="Username" value="'"${{ env.USERNAME }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '      <add key="ClearTextPassword" value="'"${{ env.GH_PACKAGES_TOKEN }}"'" />' >> ~/.nuget/NuGet/NuGet.Config
          echo '    </GitHubPackages>' >> ~/.nuget/NuGet/NuGet.Config
          echo '  </packageSourceCredentials>' >> ~/.nuget/NuGet/NuGet.Config
          echo '</configuration>' >> ~/.nuget/NuGet/NuGet.Config
          echo "Created NuGet.Config at ~/.nuget/NuGet/NuGet.Config"


      - name: Set NuGet API Key for GitHub Packages (Windows)
        if: inputs.os == 'windows-latest'
        shell: pwsh
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg.exe
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          $nuget_path = & "${{ env.VCPKG_EXE }}" fetch nuget | Select-String -Pattern '\S+\.exe$' | ForEach-Object { $_.Matches[0].Value }
          if (-not $nuget_path) { Write-Error "Failed to get nuget.exe path."; exit 1 }
          & "$nuget_path" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | Write-Host

          Write-Host "API Key for GitHubPackages set successfully."


      - name: Set NuGet API Key for GitHub Packages  (Linux/macOS)
        if: inputs.os != 'windows-latest'
        shell: bash
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg.exe
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          NUGET_PATH=$(mono "${{ env.VCPKG_EXE }}" fetch nuget | tail -n 1)
          if [ -z "$NUGET_PATH" ]; then echo "Failed to get nuget.exe path." && exit 1; fi
          mono "$NUGET_PATH" setapikey "${{ env.GH_PACKAGES_TOKEN }}" -Source "GitHubPackages" -NonInteractive 2>&1 | cat



      - name: Cache Vcpkg Asset Downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/downloads
            ${{ github.workspace }}/vcpkg/toolsrc
          key: ${{ inputs.os }}-${{ inputs.build_type }}-vcpkg-assets-${{ hashFiles('buraq/vcpkg.json') }}
          restore-keys: |
            ${{ inputs.os }}-vcpkg-assets-

      - name: Configure CMake and Install Vcpkg Dependencies
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite"
          VCPKG_INSTALL_OPTIONS: "--debug"
          VCPKG_NUGET_ACCESSTOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          CMAKE_DOTNET_TARGET_FRAMEWORK: ${{ env.DOTNET_ROOT }}/packs/Microsoft.NETCore.App.Host.win-x64/${{ env.DOTNET_VERSION }}/runtimes/win-x64/native
        shell: msys2 {0}
        run: |
          cmake --version
          ninja --version

          which ninja
          
          ls -alh
          
          echo "******Dotnet at ${{ env.DOTNET_ROOT }}/packs: **********"
          ls -al "${{ env.DOTNET_ROOT }}/packs/Microsoft.NETCore.App.Host.win-x64"

          echo "****************${CMAKE_DOTNET_TARGET_FRAMEWORK}******************"
          ls -al "${CMAKE_DOTNET_TARGET_FRAMEWORK}"
          
          ls -alh ${{ github.workspace }}/vcpkg
          
          ninja_path=$(which ninja)
          cmake_make_program_arg="-DCMAKE_MAKE_PROGRAM=\"$ninja_path\""
          
          ${{ github.workspace }}/vcpkg/vcpkg.exe install --triplet=x64-mingw-dynamic

          # Now use cmake_make_program_arg and host_triplet_arg in your cmake command
          # Now use cmake_make_program_arg and host_triplet_arg in your cmake command
          # Example of how you'd use them (assuming you have a line_continuation variable defined):
          cmake -B build \
               -S . \
               -G "Ninja" \
               -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
               -DVCPKG_TARGET_TRIPLET="${{ inputs.vcpkg_triplet }}" \
               -DVCPKG_DEFAULT_HOST_TRIPLET="${{ inputs.vcpkg_triplet }}" \
               -DCMAKE_BUILD_TYPE="${{ inputs.build_type }}" \
               -DCMAKE_DOTNET_TARGET_FRAMEWORK="${CMAKE_DOTNET_TARGET_FRAMEWORK}"  \
               "${cmake_make_program_arg}"

      - name: Build Project (Windows - MSVC)
        if: inputs.os == 'windows-latest' && inputs.vcpkg_triplet == 'x64-windows'  && success()
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/build
        run: cmake --build . --config ${{ inputs.build_type }}
        # Use cmd to ensure vcvars64.bat context persists from the configure step
        shell: cmd

      - name: Build Project (Windows - MinGW)
        if: inputs.os == 'windows-latest' && inputs.vcpkg_triplet == 'x64-mingw-dynamic' && success()
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/build
        run: cmake --build . --config ${{ inputs.build_type }}
        shell: pwsh # Use pwsh to continue the MinGW context

      - name: Build Project (Linux/macOS)
        if: inputs.os != 'windows-latest'  && success()
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/build
        run: cmake --build . --config ${{ inputs.build_type }}
        shell: bash

      - name: Download Inno Setup
        if: inputs.os == 'windows-latest'  && success()
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe?site=1" -OutFile "inno_setup.exe"
          Start-Process -Wait -FilePath "inno_setup.exe" -ArgumentList "/SILENT"
        shell: powershell

      - name: Generate installer with Inno Setup
        if: inputs.os == 'windows-latest'  && success()
        run: |
          Get-ChildItem -Path "${{ env.APP_BINARY }}" -Filter "${{ env.PROJECT_NAME }}.exe" | Select-Object -First 1 -ExpandProperty Name | Out-File -FilePath app_exe_name.txt
          
          $exeName = Get-Content -Path "app_exe_name.txt"
          $appName = $exeName.Replace(".exe", "")
          
          Write-Host "APP_NAME set to $appName"
          
          $innoSetupExe = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          $innoScriptPath = "${{ github.workspace }}/${{ env.PROJECT_NAME }}/buraq.iss"
          
          $appExeName = "$(cat app_exe_name.txt)"
          $appVersion = "${{ env.APP_VERSION }}"
          $outputDirForInno = "${{ env.OUTPUT_DIR }}"
          $appBinaryDir = "${{ env.APP_BINARY }}"
          $appArchSupport = "${{ inputs.arch }}compatible"
          $appOutputBaseFilename = "setup-${{ env.APP_EXE_NAME }}"
          
          & "$innoSetupExe" "$innoScriptPath" `
            "/DAppName=$appName" `
            "/DAppExeName=$appExeName" `
            "/DAppVersion=$appVersion" `
            "/DOutputDir=$outputDirForInno" `
            "/DAppBinaryDir=$appBinaryDir" `
            "/DAppArchSupport=$appArchSupport" `
            "/DAppOutputBaseFilename=$appOutputBaseFilename"

        shell: powershell

      - name: Show Created files after build
        run: ls -al .; echo "*****************************\n\n"; ls -al "${{ github.workspace }}\${{ env.PROJECT_NAME }}"; ls -al "${{ github.workspace }}\${{ env.PROJECT_NAME }}\Output"; echo "**** OUTPUT_DIR:${{ env.OUTPUT_DIR }}***"
        shell: bash

      - name: Create release archive
        uses: thedoctor0/zip-release@master
        with:
          filename: ${{ inputs.os }}-${{ inputs.build_type }}-build-artifacts.zip
          directory: ${{ env.OUTPUT_DIR }}

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os }}-${{ inputs.build_type }}-build-artifacts
          path: ${{ env.OUTPUT_DIR }}\setup-${{ env.APP_EXE_NAME }}.exe
          retention-days: 1

